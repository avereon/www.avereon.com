# Avereon Repositories

Below are some sample repository base URLs. They are intended to stir ideas and
provoke thought how to stage and access Avereon repositories.

-- These examples show different base URLs for the same distribution:
https://archive.avereon.com/stable
https://bin.avereon.com/stable
https://distro.avereon.com/stable
https://download.avereon.com/stable
https://market.avereon.com/stable
https://pack.avereon.com/stable
https://product.avereon.com/stable
https://store.avereon.com/stable

https://www.avereon.com/archive/stable
https://www.avereon.com/bin/stable
https://www.avereon.com/download/stable
https://www.avereon.com/market/stable
https://www.avereon.com/pack/stable
https://www.avereon.com/product/stable
https://www.avereon.com/store/stable

Ubuntu: archive
Google: dl
Microsoft: packages
Nodesource: deb
Debian: releases
Cloud Foundry: packages

Other terms: bin, channel, distro, download, feed, market, pipe, product, repo, store

-- These examples use the same base URL and show distribution options:
https://www.avereon.com/eppler (distribution code name)
https://www.avereon.com/handy (distribution code name)
https://www.avereon.com/stable (distribution alias)
https://www.avereon.com/latest (distribution alias)

-- This example with a specific version number should not be used
http://www.avereon.com/stable/1.0 (don't like the specific version here)

# The Debian Pattern
<type:str> <repository:url> <distribution:str> [<component:str>...]

Following the Debian pattern (Note that this is configuration for the repository
not necessarily that it is enabled)

typ url                                     dist   comp1  comp2
--- --------------------------------------- ------ ------ --------
avn http://download.avereon.com/market/xenon stable latest backport

Distribution >aliases or release classes< are useful to connect to a
distribution for a particular purpose. For example, the stable alias can point
to a particular distribution today and be moved to a new one in the future.
Distributions could be considered containers for releases which, in turn, are
identified by specific version numbers. Distribution is similar if not the same
concept as a channel (current working name in Avereon repos). One item to note
is that a distribution contains only one version/release of any specific product
but may contain many products. The artifacts of individual products should
generally be updated at the same time, but not necessarily the artifacts of
other products.

Components are not necessarily a concept used in Avereon repos. Components are
intended to separate packages with different licenses and therefore different
restrictions on use. This can be accomplished with a different repo and/or
license inclusion in a package.

SAMPLE APT CONFIGURATION
deb http://mirrors.xmission.com/linuxmint tessa main upstream import backport

deb http://mirrors.xmission.com/ubuntu bionic main restricted universe multiverse
deb http://mirrors.xmission.com/ubuntu bionic-updates main restricted universe multiverse
deb http://mirrors.xmission.com/ubuntu bionic-backports main restricted universe multiverse

deb http://security.ubuntu.com/ubuntu/ bionic-security main restricted universe multiverse
deb http://archive.canonical.com/ubuntu/ bionic partner

deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main
deb [arch=amd64] http://packages.microsoft.com/repos/vscode stable main
deb https://deb.nodesource.com/node_11.x bionic main
deb-src https://deb.nodesource.com/node_11.x bionic main

# Decisions to Make

At this point there are a couple of questions that are important to consider
regarding the prior examples. Note that all of the examples above are http
endpoints and not file endpoints. This brings up the question, should the file
scheme be supported as a repository protocol? If so, it does present some
restrictions on how paths and file names are represented. It also would cause
some interesting logic questions to come up regarding artifact discovery. Are
repository indexes/catalogs required or can an artifact be found by path alone?
Will "available" packages only be determined by indexes/catalogs? The DEB repos
are practically databases with catalogs/indexes/references/etc to help navigate
the large number of packages available. Also, it appears that repos can be
stacked, meaning that they can be searched in order for packages, although I
suppose any set of databases can be "stacked".


deb http://mirrors.xmission.com/linuxmint tessa main upstream import backport
turns into
http://mirrors.xmission.com/linuxmint/[dists]/tessa/main
http://mirrors.xmission.com/linuxmint/[dists]/tessa/upstream
http://mirrors.xmission.com/linuxmint/[dists]/tessa/import
http://mirrors.xmission.com/linuxmint/[dists]/tessa/backport
under each are folders for the architecture and source
http://mirrors.xmission.com/linuxmint/[dists]/tessa/main/binary-amd64
http://mirrors.xmission.com/linuxmint/[dists]/tessa/main/binary-i386
http://mirrors.xmission.com/linuxmint/[dists]/tessa/main/source

http://mirrors.xmission.com/linuxmint/[dists]/tessa/main/binary-amd64/Release
which leads to
http://mirrors.xmission.com/linuxmint/pool/main/c/cinnamon/cinnamon_2.6.13+rafaela.*
just like a database...a file based database. How far do I go?

